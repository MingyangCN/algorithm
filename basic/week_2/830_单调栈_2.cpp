/********************************************************************************
* @author: Mingyang Wu
* @date: 2023/1/8 12:34 AM
* @version: 1.0
* @description: 830.单调栈
 * 用单调递增栈，当该元素可以入栈的时候，栈顶元素就是它左侧第一个比它小的元素
********************************************************************************/
#include<iostream>

using namespace std;

const int N = 1e5 + 10;

int stk[N];
int n, tt;

int main()
{
    cin >> n;

    while (n --){
        int x;
        cin >> x;

        while(tt && stk[tt] >= x) tt --;        // 栈非空，而且栈顶元素比输入的要大，栈顶元素永远不会被用到，所以要弹出。
                                                // 每个元素只会进栈一次，出栈一次。时间复杂度 O(n)
        // tt = 0
        if(!tt) cout << "-1 ";                  // 栈空，栈其实从1开始存储，后面所以是 ++tt
        else cout << stk[tt] << " ";
        // x插入栈里面去
        stk[++ tt] = x;                         // 输入的元素变成栈顶元素，那么这个堆栈内部始终为 单调栈
    }
    return 0;
}
